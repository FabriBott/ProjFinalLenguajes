<div class="container-fluid mt-4">
  <div class="card">
    <div class="card-header">
      <h3>Nueva Factura</h3>
    </div>
    <div class="card-body">
      <%= form_with(model: @factura, local: true, id: "factura-form") do |form| %>
        <% if @factura.errors.any? %>
          <div class="alert alert-danger">
            <h4><%= pluralize(@factura.errors.count, "error") %> impidió crear esta factura:</h4>
            <ul class="mb-0">
              <% @factura.errors.full_messages.each do |message| %>
                <li><%= message %></li>
              <% end %>
            </ul>
          </div>
        <% end %>

        <div class="row mb-4">
          <div class="col-md-6">
            <div class="mb-3">
              <%= form.label :cliente_id, "Cliente", class: "form-label" %>
              <%= form.select :cliente_id, 
                  options_from_collection_for_select(@clientes, :id, :nombre_completo, params[:cliente_id]), 
                  { prompt: 'Seleccione un cliente' }, 
                  { class: "form-select", required: true } %>
              <div class="mt-2">
                <%= link_to 'Nuevo Cliente', new_cliente_path, class: 'btn btn-outline-secondary btn-sm', target: '_blank' %>
              </div>
            </div>
          </div>
          <div class="col-md-3">
            <div class="mb-3">
              <%= form.label :fecha, class: "form-label" %>
              <%= form.date_field :fecha, value: Date.current, class: "form-control", required: true %>
            </div>
          </div>
          <div class="col-md-3">
            <div class="mb-3">
              <%= form.label :tasa_impuesto_ids, "Tasas de Impuesto", class: "form-label" %>
              <%= form.collection_check_boxes :tasa_impuesto_ids, @tasas_impuesto, :id, 
                  ->(tasa) { "#{tasa.nombre} (#{tasa.porcentaje}%)" } do |b| %>
                <div class="form-check">
                  <%= b.check_box(class: "form-check-input tasa-impuesto-checkbox", onchange: "updateTaxCalculation()") %>
                  <%= b.label(class: "form-check-label") %>
                </div>
              <% end %>
              <small class="form-text text-muted">Seleccione una o más tasas de impuesto</small>
            </div>
          </div>
        </div>

        <hr>

        <h5>Productos</h5>
        <div id="detalles-container">
          <div class="detalle-item border p-3 mb-3 rounded">
            <div class="row align-items-end">
              <div class="col-md-4">
                <label class="form-label">Producto</label>
                <select name="detalles[][producto_id]" class="form-select producto-select" onchange="updatePrice(this)">
                  <option value="">Seleccione un producto</option>
                  <% @productos.each do |producto| %>
                    <option value="<%= producto.id %>" data-precio="<%= producto.precio %>" data-stock="<%= producto.stock %>">
                      <%= producto.nombre %> - ₡<%= number_with_delimiter(producto.precio, delimiter: ',') %> (Stock: <%= producto.stock %>)
                    </option>
                  <% end %>
                </select>
              </div>
              <div class="col-md-2">
                <label class="form-label">Cantidad</label>
                <input type="number" name="detalles[][cantidad]" class="form-control cantidad-input" 
                       min="1" value="1" onchange="calculateSubtotal(this)" oninput="calculateSubtotal(this)">
              </div>
              <div class="col-md-2">
                <label class="form-label">Precio Unit.</label>
                <input type="number" name="detalles[][precio_unitario]" class="form-control precio-input" 
                       step="0.01" min="0" readonly>
              </div>
              <div class="col-md-2">
                <label class="form-label">Subtotal</label>
                <input type="text" class="form-control subtotal-display" readonly>
              </div>
              <div class="col-md-2">
                <button type="button" class="btn btn-outline-danger" onclick="removeDetalle(this)">
                  Eliminar
                </button>
              </div>
            </div>
          </div>
        </div>

        <div class="mb-3">
          <button type="button" class="btn btn-outline-primary" onclick="addDetalle()">
            Agregar Producto
          </button>
        </div>

        <hr>

        <div class="row">
          <div class="col-md-8"></div>
          <div class="col-md-4">
            <div class="card">
              <div class="card-body">
                <div class="d-flex justify-content-between">
                  <span>Subtotal:</span>
                  <span id="total-subtotal">₡0.00</span>
                </div>
                <div id="impuestos-detalle">
                  <!-- Los impuestos se mostrarán aquí dinámicamente -->
                </div>
                <div class="d-flex justify-content-between">
                  <span>Total Impuestos:</span>
                  <span id="total-impuesto">₡0.00</span>
                </div>
                <hr>
                <div class="d-flex justify-content-between">
                  <strong>Total:</strong>
                  <strong id="total-final">₡0.00</strong>
                </div>
              </div>
            </div>
          </div>
        </div>

        <div class="d-flex justify-content-between mt-4">
          <%= link_to 'Cancelar', facturas_path, class: 'btn btn-secondary' %>
          <%= form.submit 'Crear Factura', class: 'btn btn-primary btn-lg' %>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
  let detalleCount = 1;

  function addDetalle() {
    const container = document.getElementById('detalles-container');
    const newDetalle = container.firstElementChild.cloneNode(true);
    
    // Limpiar valores
    const selects = newDetalle.querySelectorAll('select');
    const inputs = newDetalle.querySelectorAll('input');
    
    selects.forEach(select => select.selectedIndex = 0);
    inputs.forEach(input => {
      if (input.classList.contains('cantidad-input')) {
        input.value = 1;
        // Remover limitaciones de stock del elemento clonado
        input.removeAttribute('max');
      } else {
        input.value = '';
      }
    });
    
    // Remover alertas de stock del elemento clonado
    const alerts = newDetalle.querySelectorAll('.stock-alert');
    alerts.forEach(alert => alert.remove());
    
    container.appendChild(newDetalle);
    detalleCount++;
    calculateTotal();
  }

  function removeDetalle(button) {
    const container = document.getElementById('detalles-container');
    if (container.children.length > 1) {
      button.closest('.detalle-item').remove();
      calculateTotal();
    }
  }

  function updatePrice(select) {
    const option = select.options[select.selectedIndex];
    const precioInput = select.closest('.detalle-item').querySelector('.precio-input');
    const precio = option.dataset.precio || 0;
    const stock = option.dataset.stock || 0;
    
    precioInput.value = precio;
    
    // Actualizar el atributo max del input de cantidad
    const cantidadInput = select.closest('.detalle-item').querySelector('.cantidad-input');
    cantidadInput.setAttribute('max', stock);
    
    // Si la cantidad actual es mayor al stock, resetearla
    if (parseInt(cantidadInput.value) > parseInt(stock)) {
      cantidadInput.value = Math.min(stock, 1);
    }
    
    // Mostrar advertencia de stock
    checkStock(select.closest('.detalle-item'));
    
    calculateSubtotal(precioInput);
  }

  function calculateSubtotal(input) {
    const detalleItem = input.closest('.detalle-item');
    const cantidad = detalleItem.querySelector('.cantidad-input').value || 0;
    const precio = detalleItem.querySelector('.precio-input').value || 0;
    const subtotalDisplay = detalleItem.querySelector('.subtotal-display');
    
    const subtotal = cantidad * precio;
    subtotalDisplay.value = '₡' + subtotal.toLocaleString('es-CR', {minimumFractionDigits: 2});
    
    // Verificar stock al calcular subtotal
    checkStock(detalleItem);
    
    calculateTotal();
  }

  function checkStock(detalleItem) {
    const productoSelect = detalleItem.querySelector('.producto-select');
    const cantidadInput = detalleItem.querySelector('.cantidad-input');
    const option = productoSelect.options[productoSelect.selectedIndex];
    
    // Remover alertas existentes
    const existingAlert = detalleItem.querySelector('.stock-alert');
    if (existingAlert) {
      existingAlert.remove();
    }
    
    if (productoSelect.selectedIndex > 0) { // Si hay un producto seleccionado
      const stock = parseInt(option.dataset.stock) || 0;
      const cantidad = parseInt(cantidadInput.value) || 0;
      
      if (cantidad > stock) {
        // Crear alerta de stock insuficiente
        const alert = document.createElement('div');
        alert.className = 'alert alert-warning mt-2 stock-alert';
        alert.innerHTML = `<small><i class="fas fa-exclamation-triangle"></i> Stock insuficiente. Disponible: ${stock} unidades</small>`;
        cantidadInput.parentNode.appendChild(alert);
        
        // Limitar la cantidad al stock disponible
        cantidadInput.value = stock;
        calculateSubtotal(cantidadInput);
      }
    }
  }

  function calculateTotal() {
    let totalSubtotal = 0;
    
    document.querySelectorAll('.detalle-item').forEach(item => {
      const cantidad = item.querySelector('.cantidad-input').value || 0;
      const precio = item.querySelector('.precio-input').value || 0;
      totalSubtotal += cantidad * precio;
    });
    
    // Obtener las tasas de impuesto seleccionadas
    const tasasSeleccionadas = [];
    document.querySelectorAll('.tasa-impuesto-checkbox:checked').forEach(checkbox => {
      const label = checkbox.nextElementSibling.textContent;
      const match = label.match(/\((\d+(?:\.\d+)?)%\)/);
      if (match) {
        const porcentaje = parseFloat(match[1]);
        const nombre = label.replace(/\s*\(\d+(?:\.\d+)?%\)/, '');
        tasasSeleccionadas.push({
          nombre: nombre,
          porcentaje: porcentaje,
          decimal: porcentaje / 100
        });
      }
    });
    
    // Si no hay tasas seleccionadas, usar tasa por defecto
    if (tasasSeleccionadas.length === 0) {
      tasasSeleccionadas.push({
        nombre: 'IVA General',
        porcentaje: 13,
        decimal: 0.13
      });
    }
    
    // Calcular impuestos por tasa
    let totalImpuestos = 0;
    const impuestosDetalle = document.getElementById('impuestos-detalle');
    impuestosDetalle.innerHTML = '';
    
    tasasSeleccionadas.forEach(tasa => {
      const impuesto = totalSubtotal * tasa.decimal;
      totalImpuestos += impuesto;
      
      const impuestoDiv = document.createElement('div');
      impuestoDiv.className = 'd-flex justify-content-between';
      impuestoDiv.innerHTML = `
        <span>${tasa.nombre} (${tasa.porcentaje}%):</span>
        <span>₡${impuesto.toLocaleString('es-CR', {minimumFractionDigits: 2})}</span>
      `;
      impuestosDetalle.appendChild(impuestoDiv);
    });
    
    const total = totalSubtotal + totalImpuestos;
    
    document.getElementById('total-subtotal').textContent = '₡' + totalSubtotal.toLocaleString('es-CR', {minimumFractionDigits: 2});
    document.getElementById('total-impuesto').textContent = '₡' + totalImpuestos.toLocaleString('es-CR', {minimumFractionDigits: 2});
    document.getElementById('total-final').textContent = '₡' + total.toLocaleString('es-CR', {minimumFractionDigits: 2});
  }

  function updateTaxCalculation() {
    calculateTotal();
  }

  // Inicializar cálculos al cargar la página
  document.addEventListener('DOMContentLoaded', function() {
    // Preseleccionar la tasa predeterminada
    const tasaPredeterminada = document.querySelector('.tasa-impuesto-checkbox[value="<%= @tasas_impuesto.find(&:predeterminado?)&.id %>"]');
    if (tasaPredeterminada) {
      tasaPredeterminada.checked = true;
    }
    
    calculateTotal();
    
    // Agregar validación al formulario antes del envío
    document.getElementById('factura-form').addEventListener('submit', function(e) {
      let hasStockErrors = false;
      
      document.querySelectorAll('.detalle-item').forEach(item => {
        const productoSelect = item.querySelector('.producto-select');
        const cantidadInput = item.querySelector('.cantidad-input');
        
        if (productoSelect.selectedIndex > 0) {
          const option = productoSelect.options[productoSelect.selectedIndex];
          const stock = parseInt(option.dataset.stock) || 0;
          const cantidad = parseInt(cantidadInput.value) || 0;
          
          if (cantidad > stock) {
            hasStockErrors = true;
          }
        }
      });
      
      if (hasStockErrors) {
        e.preventDefault();
        alert('Por favor, corrija las cantidades que exceden el stock disponible antes de continuar.');
        return false;
      }
    });
  });
</script>
